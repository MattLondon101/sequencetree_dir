#ifndef foundationclasses_H
#define foundationclasses_H

#include "st4.h"


class STRF;
class STSampledRF;
class STEncode;
class STRefocus;
class STArbAcquire;
class STReadout;
class STChain;
class STAcquire;
class STSpinEchoBlock;
class STRadialLoop;
class STGradientEchoBlock;
class STSincRF;
class STGradientAmp;
class STCartesianLoop;
class STMultiAcquire;
class STArbGradient;
class STCircleGradient;
class STExcite;
class STGradientMom;

////// STRF //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STRF : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal flip_angle;
	STReal pulse_duration;
	STReal reference_fraction;
	STReal bandwidth;
	STReal time_step;
	STReal phase;
	STReal frequency;
	STInteger pulse_type;
	STVector3 gradient_amplitude;
	STReal slice_thickness;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	//events
	STScannerRFPulse *RF;
	/////////////////////////////////////////////////////
	STRF();
	virtual ~STRF();
	virtual void pulseShape(double cycles,double &re,double &im);
	bool initialize();
	bool prepare();
	bool run();
	double duration();
	double referenceTime();
	Vector3 terminalMoment();
	Vector3 gradientStartTimes(); 
	Vector3 gradientEndTimes();
	void setGradientAmplitude(Vector3 amp);
	double SAR();
	bool shapeChanged() {return m_shape_changed;}
	void setShapeChanged(bool val) {m_shape_changed=val;}
private:
	void delete_events();
	bool m_shape_changed;
};


////// STSampledRF //////
class STSampledRF : public STRF {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STString pulse_shape;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STSampledRF();
	bool prepare();
	void pulseShape(double cycles,double &re,double &im);
	
	void setSamples(long N, const double *data_real, const double *data_imag, double reference_center_time /*us*/, double reference_time_step /*us*/, double reference_bandwidth /*Hz*/);
private:
	long m_num_samples;
	double m_reference_center_time; //us
	double m_reference_timestep; //us
	double m_reference_bandwidth; //Hz
	SList<double> m_data_real;
	SList<double> m_data_imag;
	
	
};


////// STEncode //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STEncode : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STVector3 moment;
	STInteger do_rewind;
	STGradientMom *Gradient;
	/* END SEQUENCETREE */
	STEncode();
	bool prepare();
	double duration();
};


////// STRefocus //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STRefocus : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STVector3 gradient_amplitude;
	STReal slice_thickness;
	STReal bandwidth;
	STVector3 crusher_moment;
	STReal flip_angle;
	STGradientMom *Crusher1;
	STGradientAmp *SliceGradient;
	STRF *RF;
	STGradientMom *Crusher2;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STRefocus();
	bool prepare();
	Vector3 terminalMoment();
	double duration();
};


////// STArbAcquire //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STArbAcquire : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STVector3 kspace_offset;
	STGradientMom *Encode;
	STArbGradient *ReadoutGradient;
	STReadout *Readout;
	/* END SEQUENCETREE */
	
	STArbAcquire();
	bool prepare();
	double duration();
};


////// STReadout //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STReadout : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STInteger enabled;
	STReal dwell_time;
	STInteger N;
	STReal reference_fraction;
	STReal actual_reference_fraction;
	STReal reference_sample;
	STReal phase;
	STReal frequency;
	STVector3 gradient_amplitude;
	STInteger round_up_reference_time;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	//events
	STScannerReadout *Readout;
	/////////////////////////////////////////////////////
	STReadout();
	virtual ~STReadout();
	bool initialize();
	bool prepare();
	bool run();
	double duration();
	double referenceTime();
	Vector3 gradientStartTimes(); 
	Vector3 gradientEndTimes();
	void setGradientAmplitude(Vector3 amp);
	void setADCIndices(int &indx);
	void setReadoutIndex(int iterator_index,int indx);
	void setCurrentLine(long val);
	void setCurrentPartition(long val);
	void setCurrentAverage(long val);
	void setCurrentSlice(long val);
	void setCurrentEcho(long val);
	void setCurrentPhase(long val);
	void setCurrentRepetition(long val);
	void setCurrentSet(long val);
	void setCurrentSegment(long val);
	void setCurrentIda(long val);
	void setCurrentIdb(long val);
	void setCurrentIdc(long val);
	void setCurrentIdd(long val);
	void setCurrentIde(long val);
	void setFirstScanInSlice(bool val);
	void setLastScanInSlice(bool val);
	void setLastScanInConcatenation(bool val);
	void setLastScanInMeasurement(bool val);
	void scannerCommand(SString command_name,long param1=0,long param2=0,long param3=0);
private:
	void delete_events();
	int m_ADC_index;
};


////// STChain //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

#define ST_ALIGN_LEFT 1
#define ST_ALIGN_CENTER 2
#define ST_ALIGN_RIGHT 3
#define ST_ALIGN_RELATIVE 4
#define ST_ALIGN_ABSOLUTE 5

struct STChainAlignmentData {
	int alignment;
	double timing;
	int relative_index;
};

class STChain : public STNode {
public:
	STChain();
	virtual ~STChain() {
	}
	
	bool prepare();
	double duration() {return m_duration;}
	
	void addChild(STNode *obj);
	void removeChild(int index);
	void setAlignment(int index,int alignment,double timing=0,int relative_index=0);
	void setDuration(double val) {m_duration=val;}
	void alignChild(STNode *childptr,int alignment,double timing,int relative_index);
private:
	SList<STChainAlignmentData> m_alignment_data;
	double m_duration;
};

bool overlaps(STNode *C1,STNode *C2);


////// STAcquire //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STAcquire : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STVector3 echo_moment;
	STVector3 moment_per_point;
	STGradientMom *Encode;
	STGradientAmp *ReadoutGradient;
	STReadout *Readout;
	/* END SEQUENCETREE */
	
	STAcquire();
	bool prepare();
	double duration();
};


////// STSpinEchoBlock //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STSpinEchoBlock : public STChain
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal TE;
	STReal TR;
	STVector3 kspace_dir;
	STVector3 kspace_echo;
	STExcite *Excite;
	STRefocus *Refocus;
	STAcquire *Acquire;
	STEncode *Rewind;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STSpinEchoBlock();
	bool initialize();
	bool prepare();
};


////// STRadialLoop //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STRadialLoop : public STLoop
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STIterator angle;
	STIterator PE;
	STVector3 readout_dir1;
	STVector3 readout_dir2;
	STVector3 PE_dir;
	STGradientEchoBlock *Block;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STRadialLoop();
	bool prepare();
	
	bool loopRun();
};


////// STGradientEchoBlock //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STGradientEchoBlock : public STChain
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal TE;
	STReal TR;
	STVector3 kspace_dir;
	STVector3 kspace_echo;
	STReal excite_time;
	STExcite *Excite;
	STAcquire *Acquire;
	STEncode *Rewind;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STGradientEchoBlock();
	bool initialize();
	bool prepare();
};


////// STSincRF //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */ 

class STSincRF : public STRF {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal num_lobes_left;
	STReal num_lobes_right;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STSincRF();
	bool prepare();
	void pulseShape(double cycles,double &re,double &im);
};


////// STGradientAmp //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STGradientAmp : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal ramp_time_1;
	STReal plateau_time;
	STReal ramp_time_2;
	STVector3 amplitude;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	//events
	STScannerGradient *GX;
	STScannerGradient *GY;
	STScannerGradient *GZ;
	/////////////////////////////////////////////////////
	STGradientAmp();
	virtual ~STGradientAmp();
	bool initialize();
	bool prepare();
	bool run();
	double duration();
	Vector3 terminalMoment();
	Vector3 totalGradientMoment();
	Vector3 gradientStartTimes(); 
	Vector3 gradientEndTimes();
private:
	void delete_events();
};


////// STCartesianLoop //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STCartesianLoop : public STLoop
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STIterator PE1;
	STIterator PE2;
	STVector3 readout_dir;
	STVector3 PE1_dir;
	STVector3 PE2_dir;
	STGradientEchoBlock *Block;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STCartesianLoop();
	bool prepare();
	
	bool loopRun();
};


////// STMultiAcquire //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STMultiAcquire : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STInteger num_echoes;
	STReal echo_spacing;
	STInteger reference_echo;
	STInteger alternating;
	STInteger num_readout_points;
	STReal dwell_time;
	STReal ramp_time;
	STVector3 echo_moment;
	STVector3 moment_per_point;
	STVector3 step_moment;
	STReal maxamp;
	STReal ramprate;
	/* END SEQUENCETREE */
	
	STMultiAcquire();
	bool prepare();
	double duration();
	void setMDHOnline();
private:
	SList<STAcquire *> m_echoes;
};


////// STArbGradient //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STArbGradient : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal ramp_time_1;
	STReal plateau_time;
	STReal ramp_time_2;
	STVector3 kspace_offset;
	STReal peakamp;
	STReal peakslew;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	//events
	STScannerArbGradient *GX;
	STScannerArbGradient *GY;
	STScannerArbGradient *GZ;
	/////////////////////////////////////////////////////
	STArbGradient();
	virtual ~STArbGradient();
	
	virtual Vector3 gradientShape(double t); //t ranges from 0 to 1, accross the plateau, return k-space location
	Vector3 momentAt(double t); //t is between 0 and 1, along the plateau
	Vector3 ramp1Moment();
	
	virtual bool initialize();
	virtual bool prepare();
	virtual bool run();
	virtual double duration();
	virtual Vector3 terminalMoment();
	virtual Vector3 totalGradientMoment();
	virtual Vector3 gradientStartTimes(); 
	virtual Vector3 gradientEndTimes();
private:
	void delete_events();
	
	
	Vector3 m_total_moment;
};


////// STCircleGradient //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STCircleGradient : public STArbGradient {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal kspace_radius_1;
	STReal kspace_radius_2;
	STReal num_cycles;
	STVector3 kspace_direction_1;
	STVector3 kspace_direction_2;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STCircleGradient();
	virtual ~STCircleGradient();
	
	virtual Vector3 gradientShape(double t); //t ranges from 0 to 1, accross the plateau, return k-space location
	
	virtual bool prepare();
private:
};


////// STExcite //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STExcite : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STVector3 gradient_amplitude;
	STReal slice_thickness;
	STReal bandwidth;
	STInteger prephase;
	STGradientMom *Prephase;
	STGradientAmp *SliceGradient;
	STRF *RF;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STExcite();
	bool prepare();
	Vector3 terminalMoment();
	double duration();
};


////// STGradientMom //////
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STGradientMom : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STVector3 ramp_times_1;
	STVector3 plateau_times;
	STVector3 ramp_times_2;
	STVector3 start_times;
	STVector3 amplitude;
	STInteger alignment;
	STInteger always_min_dur;
	STReal maxamp;
	STReal ramprate;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */	
	//events
	STScannerGradient *GX;
	STScannerGradient *GY;
	STScannerGradient *GZ;
	/////////////////////////////////////////////////////
	STGradientMom();
	virtual ~STGradientMom();
	bool initialize();
	bool setMoment(Vector3 mom);
	bool prepare();
	bool run();
	double duration();
	Vector3 terminalMoment();
	Vector3 totalGradientMoment();
	Vector3 gradientStartTimes(); 
	Vector3 gradientEndTimes();
private:
	void delete_events();
};


#endif
