#ifndef customclasses_H
#define customclasses_H

#include "foundationclasses.h"

class STSphericalLoop;
class STZTEAcquire;
class STRoot;
class STZTEBlock;

////// STSphericalLoop //////
#line 1 "header-of-STSphericalLoop"
/* BEGIN EXCLUDE */
/* END EXCLUDE */
//#include "streorderinfo.h"
//#define _USE_MATH_DEFINES

class STSphericalLoop : public STLoop
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STIterator projection;
	STIterator average;
	STVector3 readout_dir1;
	STVector3 readout_dir2;
	STVector3 gradient_amp;
	STInteger num_projections;
	STInteger num_averages;
	STInteger RFS;
	STInteger phi_0;
	STInteger isMainLoop;
	STReal Radius;
	STZTEBlock *Block;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	static const double PI; 
	static int iteration_number;
	long setKspaceLocations(int radius);
	STSphericalLoop();
	virtual ~STSphericalLoop();
	bool prepare();
	bool loopRun();
	typedef struct
     {
       double lKx; 
       double lKy; 
//       double lKz;  
     } RawLineData;    
private:
      RawLineData* m_reorderInfo; 
//      double hold_phi;
};


////// STZTEAcquire //////
#line 1 "header-of-STZTEAcquire"
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STZTEAcquire : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STVector3 echo_moment;
	STVector3 moment_per_point;
	STReal readout_offset;
	STReal RF_offset;
	STRF *RF;
	STGradientAmp *ReadoutGradient;
	STReadout *Readout;
	/* END SEQUENCETREE */
	
	STZTEAcquire();
	bool prepare();
	Vector3 terminalMoment();
	double duration();
};


////// STRoot //////
#line 1 "header-of-STRoot"
class STRoot : public STSequence
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal FOVx;
	STReal FOVy;
	STReal FOVz;
	STSphericalLoop *PrepLoop;
	STSphericalLoop *ZTELoop;
	STSphericalLoop *PETRALoop;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STRoot();
	bool prepare();
};


////// STZTEBlock //////
#line 1 "header-of-STZTEBlock"
/* BEGIN EXCLUDE */
/* END EXCLUDE */

class STZTEBlock : public STChain
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal TE;
	STReal TR;
	STVector3 kspace_dir;
	STVector3 kspace_echo;
	STReal excite_time;
	STZTEAcquire *Acquire;
	STAcquire *Acquire2;
	STEncode *Rewind;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STZTEBlock();
	bool initialize();
	bool prepare();
};


#endif
